# from random import randint
# from random import shuffle
# from random import sample
# from random import random
# from collections import defaultdict
# import re
# import datetime
# from collections import Counter
# from collections import OrderedDict
# from math import ceil
# import sys
# import nltk
# import ssl
# from ast import literal_eval
# import numpy as np
from p_cipher import Permutation_Cipher
from collections import Counter
from math import ceil
# # pip install nltk numpy

# try:
#     _create_unverified_https_context = ssl._create_unverified_context
# except AttributeError:
#     pass
# else:
#     ssl._create_default_https_context = _create_unverified_https_context

# nltk.download('punkt')
# # from collections import defaultdict

# # f = open("words.txt")
# # words = list(map(str.strip, f.readlines()))
# # max_len = max(map(len, words))
# # d = defaultdict(set)


# # def recur(ml, base):
# #     for i in range(ml - base):
# #         for word in words:
# #             if i < len(word):
# #                 d[base + i].add(word[i])
# #             elif i == len(word):
# #                 d[base + i].add(' ')
# #             else:
# #                 recur(ml, base + i)

# # recur(25, 0)

# # for k, v in d.items():
# #     print(k, str(sorted(list(v))))

# # print(sorted(list(set(" ".join(words)))))

# def import_word_gram(words):
#     gram_score = {}
#     wordstr = ' '.join(words)
#     eg = nltk.everygrams(wordstr,min_len=2,max_len=8)
#     fdist = nltk.FreqDist(eg)
#     for k,v in fdist.items():
#         k = ''.join(k)
#         if k.count(' ') >= 2 or (k.count(' ')== 1 and k[0] != ' ' and k[-1] != ' '):
#             continue
#         gram_score[k] = len(k)
#     # for k in range(2,100):
#     #     gram_score[k*' '] = int(-(100*k))
#     # for word in words:
#     #     if len(word) <= 6:
#     #         gram_score[' '+word+' '] = 100000
#     # fprint(gram_score)
#     print(gram_score)
#     return gram_score

# def cal(plain, gram):
#     fitness = 0
#     # prev = -1
#     # bad_word_len = 1
#     for i in range(len(plain)-8):
#         # if plain[i] == ' ':
#         #     if i - prev - 1 not in self.words_len_range :
#         #         bad_word_len += (i - prev - 1) 
#         #     prev = i
#         p = plain[i:i+2] 
#         for j in range(2,8):
#             p += plain[i+j]
#             if p in gram:
#                 fitness += gram[p]
#     # print(bad_word_len)
#     # return fitness//(bad_word_len**2)
#     return fitness

# with open("words.txt") as f:
#     words = list(map(str.strip, f.readlines()))

# word_gram = import_word_gram(words)

# with open("test2.enc") as f:
#     crypt = list(map(int,f.readline().strip().split(",")))

# d = {}
# for word in words:
#     d.clear()
#     if len(word) == 5:
#         word += ' '
#     plain = crypt[:]
#     for i in range(5):
#         d[plain[i]] = word[i]
#         plain[i] = word[i]
#     for i in range(5, len(plain)):
#         if plain[i] in d:
#             plain[i] = d[plain[i]]
#         else:
#             plain[i] = ' '
#     plain = "".join(plain)
#     # print(plain)
#     print(cal(plain,word_gram), word)

    
    




with open("test2.enc") as f:
    crypt = list(map(int,f.readline().strip().split(",")))

with open("test2_plain.txt") as f:
    pl = f.readline().strip()

c = Counter(crypt)
d = {}
for i,p in enumerate(pl):
    d[crypt[i]] = p

permutation_cipher = Permutation_Cipher()

# for i in range(106):
#     print(i," ",ceil(105*(c[i]/len(crypt)))," {}->{}".format(d[crypt[i]],permutation_cipher.frequency[d[crypt[i]]]), )



for i in range(106):
    if i in d and d[i] == ' ':
        print(i," ",c[i]/len(crypt)," {}->{}".format(d[i],permutation_cipher.frequency[d[i]] ))

